AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFront, WAF, and GuardDuty for Tasky Application"

Parameters:
  AlbDnsName:
    Type: String
    Description: "DNS name of the existing ALB"
  EnableGuardDuty:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: "Enable GuardDuty with all protection plans"
  ExistingS3BucketName:
    Type: String
    Description: "Name of the existing S3 backup bucket from tasky-demo stack"

Conditions:
  EnableGuardDutyCondition: !Equals [!Ref EnableGuardDuty, "true"]

Resources:
  # WAF Web ACL with enhanced rules for EKS and MongoDB
  WebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: TaskyWebACL
      Scope: CLOUDFRONT
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: TaskyWebACL
      Rules:
        # Core rule set - general protection
        - Name: AWSManagedRulesCommonRuleSet
          Priority: 0
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedRulesCommonRuleSet
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
        
        # SQL Injection protection for MongoDB
        - Name: AWSManagedRulesSQLiRuleSet
          Priority: 1
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedRulesSQLiRuleSet
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesSQLiRuleSet
        
        # NoSQL injection protection for MongoDB
        - Name: NoSQLInjectionProtection
          Priority: 2
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: NoSQLInjectionProtection
          Statement:
            OrStatement:
              Statements:
                - RegexPatternSetReferenceStatement:
                    ARN: !GetAtt NoSQLInjectionPatternSet.Arn
                    FieldToMatch:
                      QueryString: {}
                    TextTransformations:
                      - Priority: 0
                        Type: URL_DECODE
                - RegexPatternSetReferenceStatement:
                    ARN: !GetAtt NoSQLInjectionPatternSet.Arn
                    FieldToMatch:
                      Body: {}
                    TextTransformations:
                      - Priority: 0
                        Type: URL_DECODE
        
        # Rate limiting to prevent brute force attacks
        - Name: RateLimitRule
          Priority: 3
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: RateLimitRule
          Statement:
            RateBasedStatement:
              Limit: 1000
              AggregateKeyType: IP

  # Pattern set for NoSQL injection protection
  NoSQLInjectionPatternSet:
    Type: AWS::WAFv2::RegexPatternSet
    Properties:
      Scope: CLOUDFRONT
      Description: "Patterns to detect NoSQL injection attacks"
      RegularExpressionList:
        - "\\$where\\s*:\\s*function"
        - "\\$\\$\\s*\\{.*\\}"
        - "\\$gt\\s*:|\\$lt\\s*:|\\$gte\\s*:|\\$lte\\s*:"
        - "\\$exists\\s*:|\\$type\\s*:|\\$or\\s*:\\s*\\[|\\$and\\s*:\\s*\\["
        - "\\$regex\\s*:|\\$options\\s*:"

  # CloudFront Distribution with enhanced security settings
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Ref AlbDnsName
            Id: ALBOrigin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
              OriginSSLProtocols:
                - TLSv1.2
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: ALBOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: all
            Headers:
              - Host
              - Origin
              - Authorization
              - Content-Type
              - Accept
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        WebACLId: !GetAtt WebACL.Arn
        ResponseHeadersPolicy:
          ResponseHeadersPolicyId: !GetAtt SecurityHeadersPolicy.Id

  # Security Headers Policy
  SecurityHeadersPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: TaskySecurityHeaders
        SecurityHeadersConfig:
          ContentSecurityPolicy:
            Override: true
            ContentSecurityPolicy: "default-src 'self'; script-src 'self'; object-src 'none'; frame-ancestors 'none'"
          StrictTransportSecurity:
            Override: true
            AccessControlMaxAgeSec: 31536000
            IncludeSubdomains: true
            Preload: true
          XContentTypeOptions:
            Override: true
          XFrameOptions:
            Override: true
            XFrameOption: DENY
          XSSProtection:
            Override: true
            Protection: true
            ModeBlock: true

  # GuardDuty Detector with all protection plans
  GuardDutyDetector:
    Type: AWS::GuardDuty::Detector
    Condition: EnableGuardDutyCondition
    Properties:
      Enable: true
      DataSources:
        S3Logs:
          Enable: true
        Kubernetes:
          AuditLogs:
            Enable: true
        Malware:
          ScanEc2InstanceWithFindings:
            EbsVolumes: true
          ScanS3BucketWithFindings:
            Enable: true

  # GuardDuty S3 Protection for the backup bucket
  S3ProtectionConfiguration:
    Type: AWS::GuardDuty::DetectorS3LogsConfiguration
    Condition: EnableGuardDutyCondition
    Properties:
      DetectorId: !Ref GuardDutyDetector
      BucketNames:
        - !Ref ExistingS3BucketName

  # CloudWatch Alarm for high request rates
  HighRequestRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: TaskyHighRequestRate
      AlarmDescription: "Alarm when request rate exceeds threshold"
      MetricName: RequestCount
      Namespace: AWS/CloudFront
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 5000
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DistributionId
          Value: !Ref CloudFrontDistribution
      TreatMissingData: notBreaching

Outputs:
  CloudFrontDomain:
    Description: "CloudFront Distribution Domain Name"
    Value: !GetAtt CloudFrontDistribution.DomainName
  CloudFrontDistributionId:
    Description: "CloudFront Distribution ID"
    Value: !Ref CloudFrontDistribution
  WebACLId:
    Description: "WAF Web ACL ID"
    Value: !Ref WebACL
  GuardDutyEnabled:
    Condition: EnableGuardDutyCondition
    Description: "GuardDuty Status"
    Value: "Enabled with all protection plans"
